int main() {
	//건물 배열
	int ary[100][100] = { 0, };
	int adary[100][100] = { 0, };
	int x = 101;
	//이동
	int here;
	int here2;
	int here3;
	//

	//건물 변수
	int apt = 0;
	int address = 0;
	int choice = 0;
	int move;
	int move2 = 0;
	int skdl = 0;
	int all = 0;
	//
	//이름 변수
	char name[100][100];
	char null[10] = "빈집";
	//공통
	int namerows = 0;
	int namecols = 0;

	//배열
	int namerows2 = 0;
	int namecols2 = 0;



	int namedata = 0;
	int name_move = 0;
	//배열
	int name_move2 = 0;

	//이름 입주
	char newName[10];



	//왼쪽 오른쪽 구분
	int way = 0;
	int lastI = 0;
	int lastJ = 0;
	printf("몇층짜리 아파트입니까?");
	scanf("%d", &apt);
	printf("몇호까지 있습니까?\n");
	scanf("%d", &address);
	all = apt * address;
	printf("총 %d세대가 살고 있습니다.\n", all);
	//나이
	for (int i = 0; i < apt; i++) {
		for (int j = 0; j < address; j++) {
			adary[i][j] = x;
			x++;
			printf("입주민들의 나이를 입력해주세요");
			scanf("%d", &ary[i][j]);
		}
		x = x - address;
		x = x + 100;
		printf("\n");
	}
	//이름
	for (int i = 0; i < apt*address; i++){
			printf("입주민들의 이름을 입력해주세요");
			scanf("%s", &name[i]);
		}


	//시작
	for (;;) {
		for (int i = 0; i < apt; i++) {
			for (int j = 0; j < address; j++) {
				printf(" [%d호][이름:%s][나이:%d세] | ", adary[i][j], name[name_move], ary[i][j]);
				name_move++;

			}
			printf("\n");

		}
		name_move = 0;

		printf("1.이사 2.입주\n");
		printf("무엇을 할지 선택해주세요\n");
		scanf("%d", &choice);
		//1번
		if (choice == 1) {
			printf("이사하실 호수를 선택해주세요");
			scanf("%d", &move);
			for (int i = 0; i < apt; i++) {
				for (int j = 0; j < address; j++) {
					if (adary[i][j] == move) {
						ary[i][j] = 0;
						namerows = i;
						namecols = j;
						break;
					}
				}
			}
			//이름 이사
			if (namerows == 0) {
				namerows = 0;
				name_move = namerows + namecols;
				printf("[%d][%d]\n", namerows, namecols);
				printf("이름의 인덱스 name %d\n", name_move);
				strcpy(name[name_move], null);
			}
			else {
				namerows = namerows * address;
				name_move = namerows + namecols;
				printf("[%d][%d]\n", namerows, namecols);
				printf("이름의 인덱스 name %d\n", name_move);
				strcpy(name[name_move], null);
			}
			name_move = 0;
			//이름 이사 끝

		}
		//이사 끝//

		//입주 시작//


		//입주배열
		int copyr = 0;
		int copyc = 0;
		int copyCnt = 0;


		//j 대체
		int copyJ = 0;
		//0 대응
		int zeroRow = 0;
		int zeroColumn = 0;

		int zeroRow2 = 0;
		int zeroColumn2 = 0;

		int zeroCnt = 0;

		//
		if (choice == 2) {
			printf("입주하실 호수를 선택해주세요: ");
			scanf("%d", &move2);

			// 새로운 입주자 정보 입력
			printf("새로운 입주자의 나이를 입력해주세요: ");
			scanf("%d", &skdl);
			printf("새로운 입주자의 이름을 입력해주세요: ");
			scanf("%s", &newName);
			for (int i = 0; i < apt; i++) {
				for (int j = 0; j < address; j++) {
					if (adary[i][j] == move2) {
						copyr = i;
						copyc = j;
						namerows = i;
						namecols = j;
						namerows2 = i;
						namecols2 = j;
						lastI = i;
						lastJ = j;
						break;
					}
				}
			}
			for (int i = 0; i < apt-1; i++) {
				for (int j = 0; j < address; j++) {
					
					if (i == copyr && j == copyc) {
						break;
					}
					copyCnt++;
				}
			}

			//복사한 좌표 끝


			printf("copy row & copy column : [%d][%d]\n", copyr, copyc);
			printf("copy cnt : %d\n", copyCnt);


			//0에다 넣을때
			if (ary[copyr][copyc] == 0) {
				ary[copyr][copyc] = skdl;
				goto here3;
			}
			//

			if (lastI == 0) {
				way= lastJ;
				
			}
			else {
				lastI = lastI * address;
				way = lastI + lastJ;
			}
			//10
			// 5
			// 3
			//오른쪽으로
			if (way>all/2) {
				printf("오른쪽으로 돕니다 %d",way);
				//0에대해서
				for (int i = apt - 1; i >= 0; i--) {
					for (int j = address - 1; j >= 0; j--) {
						if (ary[i][j] == 0) {
							zeroCnt++;
							zeroRow = i;
							zeroColumn = j;
							zeroRow2 = i;
							zeroColumn2 = j;
						}
					}
				}

				//0에 대한거 끝
				copyJ = zeroColumn;



				//0이 없을때
				if (zeroCnt == 0) {
					printf("address %d\n", address);
					printf("0없음!\n");
					// 해당 세대의 정보를 뒤로 한 칸씩 이동
					for (int i = apt - 1; i >= 0; i--) {
						for (int j = address - 1; j > 0; j--) {
							ary[i][j] = ary[i][j - 1];
							if (i == copyr && j == copyc) {
								printf("break point: [%d][%d]", i, j);
								printf("\n뷁\n");
								goto here;
							}
						}
						ary[i][0] = ary[i - 1][address - 1];
					}
					//이름


				}

				//0이 존재할때
				else {
					printf("address %d\n", address);
					printf("0있음!\n");
					printf("zero point: [%d][%d]", zeroRow, zeroColumn);
					// 해당 세대의 정보를 뒤로 한 칸씩 이동
					for (int i = zeroRow; i >= 0; i--) {
						for (int j = zeroColumn; j >= 0; j--) {
							ary[i][copyJ] = ary[i][copyJ - 1];
							copyJ--;
							if (copyJ == 0) {
								break;
							}
							printf("move: [%d][%d]\n", i, copyJ);
							if (i == copyr && j == copyc) {
								printf("break point: [%d][%d]", i, j);
								printf("\n뷁\n");
								goto here;
							}
						}
						ary[i][0] = ary[i - 1][address - 1];
						copyJ = address - 1;
					}
				}

			here:
				ary[copyr][copyc] = skdl;
				//이름배열시작
				if (zeroCnt == 0) {
					if (namerows2 == 0) {
						namerows2 = 0;
						name_move2 = namerows2 + namecols2;
						for (int i = (apt * address) - 1; i >= name_move2; i--) {
							strcpy(name[i], name[i - 1]);
							printf("이름 이동%s %s", name[i], name[i - 1]);
						}

					}
					else {
						namerows2 = namerows2 * address;
						name_move2 = namerows2 + namecols2;
						namerows2 = namerows2 * address;
						for (int i = (apt * address) - 1; i >= name_move2; i--) {
							strcpy(name[i], name[i - 1]);
							printf("이름 이동%s %s", name[i], name[i - 1]);
						}

					}
				}
				else {
					if (zeroRow2 == 0) {

						name_move2 = namerows2 + namecols2;
						for (int i = zeroColumn2; i >= name_move2; i--) {
							strcpy(name[i], name[i - 1]);
							printf("이름 이동%s %s", name[i], name[i - 1]);
						}

					}
					else {
						namerows2 = namerows2 * address;
						zeroRow2 = zeroRow2 * address;
						name_move2 = namerows2 + namecols2;
						namerows2 = namerows2 * address;
						for (int i = zeroRow2 + zeroColumn2; i >= name_move2; i--) {
							strcpy(name[i], name[i - 1]);
							printf("이름 이동%s %s", name[i], name[i - 1]);
						}

					}
				}
			}
			//왼쪽
			
			else {
			printf("왼쪽으로 돕니다 %d\n",way);
			//0에대해서
			for (int i = 0; i <= apt-1; i++) {
				for (int j = 0; j <= address - 1; j++) {
					if (ary[i][j] == 0) {
						zeroCnt++;
						zeroRow = i;
						zeroColumn = j;
						zeroRow2 = i;
						zeroColumn2 = j;
					}
				}
			}

			//0에 대한거 끝
			copyJ = zeroColumn;
				//0이 없을때
				if (zeroCnt == 0) {
					printf("address %d\n", address);
					printf("0없음!\n");
					// 해당 세대의 정보를 뒤로 한 칸씩 이동
					for (int i = 0; i <= apt-1; i++) {
						for (int j = 0; j < address-1; j++) {
							ary[i][j] = ary[i][j+1];

							if (i == copyr && j == copyc) {
								printf("break point: [%d][%d]", i, j);
								printf("\n뷁\n");
								goto here2;
							}
						}
						ary[i][address-1] = ary[i+1][0];
					}
					//이름


				}

				//0이 존재할때
				else {
					printf("address %d\n", address);
					printf("0이있음!\n");
					printf("zero point: [%d][%d]\n", zeroRow, zeroColumn);
					// 해당 세대의 정보를 뒤로 한 칸씩 이동


							//2 3 0 5 1
							//2 3 205 4 5
							//1 2 3 4 5
					for (int i = zeroRow; i <= apt-1; i++) {
						for (int j = 0; j <= address-1; j++) {
							ary[i][copyJ] = ary[i][copyJ+ 1];
							printf("move: [%d][%d]\n", i, copyJ);
							copyJ++;

							
							if (i == copyr && copyJ == copyc) {
								printf("break point: [%d][%d]", i, j);
								printf("\n뷁\n");
								goto here2;
							}
							if (copyJ == address - 1) {
								break;
							}
						}
						ary[i][address - 1] = ary[i + 1][0];
						copyJ = 0;
					}
				}

			here2:
				ary[copyr][copyc] = skdl;
				//이름배열시작
				if (zeroCnt == 0) {
					if (namerows2 == 0) {
						namerows2 = 0;

						name_move2 = namerows2 + namecols2;
						for (int i = 0; i <= name_move2; i++) {
							strcpy(name[i], name[i+1]);
							printf("이름 이동%s %s", name[i], name[i + 1]);
						}

					}
					else {
						namerows2 = namerows2 * address;
						name_move2 = namerows2 + namecols2;
						namerows2 = namerows2 * address;
						for (int i = 0; i <= name_move2; i++) {
							strcpy(name[i], name[i + 1]);
							printf("이름 이동%s %s", name[i], name[i + 1]);
						}

					}
				}
				else {
					if (zeroRow2 == 0) {
						// 1 0 3 4 5 6 0 8 9 10
						// a s d f g h j q w e
						name_move2 = namerows2 + namecols2;
						for (int i = zeroColumn2; i <= name_move2; i++) {
							strcpy(name[i], name[i + 1]);
							printf("이름 이동%s %s", name[i], name[i + 1]);
						}

					}
					else {
						namerows2 = namerows2 * address;
						zeroRow2 = zeroRow2 * address;
						name_move2 = namerows2 + namecols2;
						namerows2 = namerows2 * address;
						for (int i = zeroRow2 + zeroColumn2; i <= name_move2;i++) {
							strcpy(name[i], name[i + 1]);
							printf("이름 이동%s %s", name[i], name[i + 1]);
						}

					}
				}

			}
			here3:
				//이름 마지막 단계
				if (namerows == 0) {
					namerows = 0;
					name_move = namerows + namecols;
					printf("[%d][%d]\n", namerows, namecols);
					printf("이름의 인덱스 name %d\n", name_move);
					strcpy(name[name_move], newName);
				}
				else {
					namerows = namerows * address;
					name_move = namerows + namecols;
					printf("[%d][%d]\n", namerows, namecols);
					printf("이름의 인덱스 name %d\n", name_move);
					strcpy(name[name_move], newName);
				}
				name_move = 0;
			

		}
		}
		//해당세대 끝
	}
